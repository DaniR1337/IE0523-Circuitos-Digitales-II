$date
	Tue Mar 28 20:59:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module sumador8_tb $end
$var wire 1 ! RCO $end
$var wire 8 " Q [7:0] $end
$var reg 8 # A [7:0] $end
$var reg 8 $ B [7:0] $end
$var reg 1 % CLK $end
$var reg 1 & ENB $end
$var reg 2 ' MODO [1:0] $end
$var reg 1 ( RCI $end
$scope module dut $end
$var wire 8 ) A [7:0] $end
$var wire 8 * B [7:0] $end
$var wire 1 % CLK $end
$var wire 1 & ENB $end
$var wire 2 + MODO [1:0] $end
$var wire 1 ( RCI $end
$var wire 1 ! RCO $end
$var wire 4 , Q2 [3:0] $end
$var wire 4 - Q1 [3:0] $end
$var wire 8 . Q [7:0] $end
$var wire 1 / C1 $end
$var reg 1 0 W1 $end
$var reg 4 1 W2 [3:0] $end
$var reg 4 2 W3 [3:0] $end
$scope module bloque1 $end
$var wire 4 3 A [3:0] $end
$var wire 4 4 B [3:0] $end
$var wire 1 % CLK $end
$var wire 1 & ENB $end
$var wire 2 5 MODO [1:0] $end
$var wire 1 ( RCI $end
$var wire 4 6 negB [3:0] $end
$var reg 4 7 Q [3:0] $end
$var reg 1 / RCO $end
$upscope $end
$scope module bloque2 $end
$var wire 4 8 A [3:0] $end
$var wire 4 9 B [3:0] $end
$var wire 1 % CLK $end
$var wire 1 & ENB $end
$var wire 2 : MODO [1:0] $end
$var wire 1 0 RCI $end
$var wire 4 ; negB [3:0] $end
$var reg 4 < Q [3:0] $end
$var reg 1 ! RCO $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx <
bx ;
b11 :
bx 9
bx 8
bx 7
bx 6
b11 5
bx 4
bx 3
bx 2
bx 1
x0
x/
bx .
bx -
bx ,
b11 +
bx *
bx )
0(
b11 '
1&
0%
bx $
bx #
bx "
x!
$end
#5
bx0000 "
bx0000 .
b0 -
b0 7
1%
#10
b1101 6
b0 ;
b11 4
b0 9
00
b100 1
b1 3
b1 8
0%
b11 $
b11 *
b10001 #
b10001 )
b1 '
b1 +
b1 5
b1 :
#15
0!
b1 ,
b1 <
0/
b10100 "
b10100 .
b100 -
b100 7
1%
#20
b1111 6
b1 4
10
b0 1
b1111 3
b1111 8
0%
b1 $
b1 *
b11111111 #
b11111111 )
#25
1/
b0 -
b0 7
1!
b0 "
b0 .
b0 ,
b0 <
1%
#30
b1110 6
b10 4
00
b1001 1
b111 3
b0 8
0%
b10 $
b10 *
b111 #
b111 )
#35
0!
0/
b1001 "
b1001 .
b1001 -
b1001 7
1%
#40
0%
b11 '
b11 +
b11 5
b11 :
#45
b0 "
b0 .
b0 -
b0 7
1%
#50
b1101 6
b11 4
b1 1
b1101 2
b100 3
0%
b11 $
b11 *
b100 #
b100 )
b10 '
b10 +
b10 5
b10 :
#55
b1 "
b1 .
b1 -
b1 7
1%
#60
b1111 6
b1 4
b1110 1
b1111 2
b1111 3
0%
b1 $
b1 *
b1111 #
b1111 )
#65
b1110 "
b1110 .
b1110 -
b1110 7
1%
#70
b1000 6
b1000 4
10
b1011 1
b1000 2
b11 3
0%
b1000 $
b1000 *
b11 #
b11 )
#75
1!
b1111 ,
b1111 <
1/
b11111011 "
b11111011 .
b1011 -
b1011 7
1%
#80
b1101 6
b11 4
00
b1000 1
b101 3
0%
b11 $
b11 *
b101 #
b101 )
b1 '
b1 +
b1 5
b1 :
#85
0/
b1000 -
b1000 7
0!
b1000 "
b1000 .
b0 ,
b0 <
1%
#90
0%
b0 '
b0 +
b0 5
b0 :
#95
1%
#100
b1111 6
b1 4
b10 1
b1111 2
b11 3
0%
b1 $
b1 *
b11 #
b11 )
b10 '
b10 +
b10 5
b10 :
#105
b10 "
b10 .
b10 -
b10 7
1%
#110
0%
0&
#115
1%
#120
0%
